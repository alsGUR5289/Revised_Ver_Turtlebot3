#!/usr/bin/env python
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

from typing import Any
import os
import rospy, roslaunch
import numpy as np
from enum import Enum
from std_msgs.msg import UInt8
from turtlebot3_autorace_msgs.msg import MovingParam

class CoreModeDecider():
    def __init__(self):
        self.ros_package_path = os.path.dirname(os.path.realpath(__file__))
        self.ros_package_path = self.ros_package_path.replace('turtlebot3_autorace_core/nodes', '')

        # subscribes : traffic light, traffic sign (intersection + tunnel + construction + parking)
        self.sub_traffic_light = rospy.Subscriber('/detect/traffic_light', UInt8, self.cbInvokedByTrafficLight, queue_size=1)
        self.sub_traffic_sign = rospy.Subscriber('/detect/traffic_sign', UInt8, self.cbInvokedByTrafficSign, queue_size=1)

        # publishes : decided mode
        self.pub_decided_mode = rospy.Publisher('/core/decided_mode', UInt8, queue_size=1)

        # this node launches nodes corresponding to the detected traffic light / sign
        self.Step = Enum('Step', 'traffic_light intersection construction parking level_crossing tunnel finished')
        self.Mode = Enum('Mode', 'idle lane_following another_action')
        self.TrafficLight = Enum('TrafficLight', 'red yellow green')
        self.current_step = self.step.traffic_light.value

        self.launched = {
            'traffic_light': False,
            'intersection': False,
            'construction': False,
            'parking': False,
            'level_crossing': False,
            'tunnel': False
        }

        self.launch = {
            'traffic_light': None,
            'intersection': None,
            'construction': None,
            'parking': None,
            'level_crossing': None,
            'tunnel': None
        }

        self.uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
        for key in self.launched.keys():
            launch_file_path = self.ros_package_path + 'turtlebot3_autorace_core/launch/turtlebot3_autorace_core.launch'
            launch_arg = 'mission:=' + key

            roslaunch_file = [(roslaunch.rlutil.resolve_launch_arguments(launch_file_path), launch_arg)]
            self.launch[key] = roslaunch.parent.ROSLaunchParent(self.uuid, roslaunch_file)

        # roslaunch
        self.currnet_mode = self.Mode.another_action.value
        self.fnPublishMode()

        # launch the first mission (traffic light)
        self.fnLaunch(self.current_step.name, True)
        # await for the green light
        self.pub_decided_mode(self.Mode.another_action.value)

    def cbInvokedByTrafficLight(self, traffic_light_type_msg):
        rospy.loginfo("invoke light")
        if traffic_light_type_msg.data == self.TrafficLight.green.value and self.current_step == self.Step.traffic_light.value and self.launched['traffic_light']:
            rospy.loginfo("Traffic light is green, proceed to the next step")
            self.fnLaunch(self.current_step.name, False)
            self.current_step += 1
            self.fnlaunch(self.current_step.name, True)
            self.pub_decided_mode(self.Mode.lane_following.value)
        else:
            rospy.loginfo("Traffic light detected, awaiting for the green light")

    def cbInvokedByTrafficSign(self, traffic_sign_type_msg):
        rospy.loginfo("invoke sign")
        

    def fnLaunch(self, step_name, is_start=True):
        if is_start:
            if not self.launched[step_name]:
                self.launch.start()
                self.launched[step_name] = True
            else:
                rospy.loginfo(step_name + "is already launched")
        else:
            if self.launched[step_name]:
                self.launch.shutdown()
                self.launched[step_name] = False
            else:
                rospy.loginfo(step_name + "is already shutdown")



if __name__ == '__main__':
    rospy.init_node('core_mode_decider')
    CoreModeDecider()
    rospy.spin()