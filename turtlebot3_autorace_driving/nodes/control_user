#!/usr/bin/env python
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Author: sendoru
 
import rospy
import numpy as np
import sys, select, os
if os.name == 'nt':
    import msvcrt, time
else:
    import tty, termios
from std_msgs.msg import Float64, Bool
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist
import time

msg = """
Control Your TurtleBot3!
---------------------------
0: stop
1: move forward
2: move backward

CTRL-C to quit
"""

def getKey():
    if os.name == 'nt':
        timeout = 0.1
        startTime = time.time()
        while(1):
            if msvcrt.kbhit():
                if sys.version_info[0] >= 3:
                    return msvcrt.getch().decode()
                else:
                    return msvcrt.getch()
            elif time.time() - startTime > timeout:
                return ''

    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key

# Using keyboard, user selects if the turtlebot should move forward or backward, and stop or go
class ControlUser():
    def __init__(self):
        self.pub_is_reverse = rospy.Publisher('/control/is_reverse', Bool, queue_size = 1)
        self.pub_is_stop = rospy.Publisher('/control/is_stop', Bool, queue_size = 1)

        self.is_reverse = False
        self.is_stop = False
    
    def main(self):
        cur_time = time.time()
        print(msg)
        while not rospy.is_shutdown():
            # print message for every 10 seconds
            if time.time() - cur_time > 10:
                print(msg)
                cur_time = time.time()
            key = getKey()
            if key == '0':
                print('stop')
                self.is_stop = True
                self.is_reverse = False
            elif key == '1':
                print('move forward')
                self.is_stop = False
                self.is_reverse = False
            elif key == '2':
                print('move backward')
                self.is_stop = False
                self.is_reverse = True
            # ctrl+c
            elif key == '\x03':
                break

            is_reverse_msg = Bool()
            is_reverse_msg.data = self.is_reverse
            self.pub_is_reverse.publish(is_reverse_msg)

            is_stop_msg = Bool()
            is_stop_msg.data = self.is_stop
            self.pub_is_stop.publish(is_stop_msg)

            # rospy.sleep(0.1)

if __name__ == '__main__':
    if os.name != 'nt':
        settings = termios.tcgetattr(sys.stdin)

    rospy.init_node('control_user')
    node = ControlUser()
    node.main()